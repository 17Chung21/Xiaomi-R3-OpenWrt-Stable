# Build OpenWrt using GitHub Actions

name: Build OpenWrt

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  COMPILE_TARGET: ramips-mt7620-xiaomi_miwifi-r3
  UPLOAD_RELEASE: true
  TZ: UTC

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        git clone --depth 1 --branch $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Cache OpenWrt
      uses: actions/cache@v2
      env:
        cache-name: cache-openwrt
      with:
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.REPO_BRANCH }}
        path: |
          openwrt/staging_dir
          openwrt/build_dir
          openwrt/dl

    - name: Setup feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load custom files
      run: |
        [ -d files ] && mv files openwrt/files
        cd openwrt
        git status -s

    - name: Load custom config
      run: |
        [ -f $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        echo "Current device: $(grep '^CONFIG_TARGET.*DEVICE.*=y' openwrt/.config | sed -r 's/.*DEVICE_(.*)=y/\1/')"

    - name: Apply patches
      run: |
        [ -d patches ] && mv patches openwrt/patches
        cd openwrt
        [ -d patches ] && for FILE in $(ls patches | grep .patch); do git apply --check patches/$FILE; git apply patches/$FILE; done
        git status -s

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Build PbBoot firmware
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
          cd openwrt/bin/targets/*/*
          dd if=/dev/zero bs=4m count=1 | tr "\000" "\377" > padded_kernel.bin && \
          dd if=openwrt-$COMPILE_TARGET-squashfs-kernel1.bin of=padded_kernel.bin conv=notrunc && \
          cat padded_kernel.bin openwrt-$COMPILE_TARGET-squashfs-rootfs0.bin > openwrt-$COMPILE_TARGET-squashfs-pbboot.bin && \
          rm -rf padded_kernel.bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.REPO_BRANCH }}
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 1
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
